{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction';\nimport ChangeItem_Transaction from '../transactions/ChangeItem_Transactions';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CHANGE_ITEM_NAME: \"CHANGE_ITEM_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  //SET_ITEM_NAME_EDIT_ACTIVE: \"SET_ITEM_NAME_EDIT_ACTIVE\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    itemActive: false,\n    listMarkedForDeletion: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.top5List,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            //isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      //Item UPDATE OF ITS NAME\n\n      case GlobalStoreActionType.CHANGE_ITEM_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.top5List,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            //isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            //isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            //isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            //isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: true,\n            //isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A ITEM NAME\n      // case GlobalStoreActionType.SET_ITEM_NAME_EDIT_ACTIVE: {\n      //     return setStore({\n      //         idNamePairs: store.idNamePairs,\n      //         currentList: store.currentList,\n      //         newListCounter: store.newListCounter,\n      //         isListNameEditActive: false,\n      //         isItemEditActive: false,\n      //         listMarkedForDeletion: null,\n      //         isItemEditActive: true\n      //     });\n      // }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    console.log(newName);\n\n    if (newName !== \"\") {\n      async function asyncChangeListName(id) {\n        let response = await api.getTop5ListById(id);\n\n        if (response.data.success) {\n          let top5List = response.data.top5List;\n          top5List.name = newName;\n\n          async function updateList(top5List) {\n            response = await api.updateTop5ListById(top5List._id, top5List);\n\n            if (response.data.success) {\n              async function getListPairs(top5List) {\n                response = await api.getTop5ListPairs();\n\n                if (response.data.success) {\n                  let pairsArray = response.data.idNamePairs;\n                  storeReducer({\n                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                    payload: {\n                      idNamePairs: pairsArray,\n                      top5List: top5List\n                    }\n                  });\n                }\n              }\n\n              getListPairs(top5List);\n            }\n          }\n\n          updateList(top5List);\n        }\n      }\n\n      asyncChangeListName(id);\n    }\n  }; //This Function processes changind the item name\n\n\n  store.changeItemName = function (index, newName) {\n    // GET THE LIST\n    async function asyncChangeItemName() {\n      let top5List = store.currentList;\n      top5List.items[index] = newName;\n\n      async function updateList(top5List) {\n        let response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.success) {\n          async function getListPairs(top5List) {\n            response = await api.getTop5ListPairs();\n\n            if (response.data.success) {\n              let pairsArray = response.data.idNamePairs;\n              storeReducer({\n                type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                payload: {\n                  idNamePairs: pairsArray,\n                  top5List: top5List\n                }\n              });\n            }\n          }\n\n          getListPairs(top5List);\n        }\n      }\n\n      updateList(top5List);\n    }\n\n    asyncChangeItemName();\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n    document.getElementById(\"close-button\").classList.replace(\"top5-button\", \"top5-button-disabled\");\n    tps.clearAllTransactions();\n    store.UpdateDisableControl();\n  }; // This Function is to create new list\n\n\n  store.CreateNewList = function () {\n    async function asyncCreateNewList() {\n      let NewList = {\n        \"name\": \"Untitled\",\n        \"items\": [\"?\", \"?\", \"?\", \"?\", \"?\"]\n      };\n      const response = await api.createTop5List(NewList);\n\n      if (response.data.success) {\n        console.log(response);\n        store.loadIdNamePairs();\n        store.setCurrentList(response.data.top5List._id);\n      }\n    }\n\n    asyncCreateNewList();\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getTop5ListPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    store.UpdateDisableControl();\n    document.getElementById(\"close-button\").classList.replace(\"top5-button\", \"top5-button-disabled\");\n    asyncLoadIdNamePairs();\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.setCurrentList = function (id) {\n    if (id.search(\"-\") === -1) {\n      async function asyncSetCurrentList(id) {\n        let response = await api.getTop5ListById(id);\n\n        if (response.data.success) {\n          let top5List = response.data.top5List;\n          response = await api.updateTop5ListById(top5List._id, top5List);\n\n          if (response.data.success) {\n            storeReducer({\n              type: GlobalStoreActionType.SET_CURRENT_LIST,\n              payload: top5List\n            });\n            store.history.push(\"/top5list/\" + top5List._id);\n          }\n        }\n      }\n\n      asyncSetCurrentList(id);\n    }\n\n    store.UpdateDisableControl();\n    document.getElementById(\"close-button\").classList.replace(\"top5-button-disabled\", \"top5-button\");\n    console.log(store.currentList);\n  };\n\n  store.addMoveItemTransaction = function (start, end) {\n    let transaction = new MoveItem_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n    store.UpdateDisableControl();\n  };\n\n  store.addChangeItemTranscation = function (index, newName) {\n    document.getElementById(\"close-button\").classList.replace(\"top5-button\", \"top5-button-disabled\");\n    document.getElementById(\"undo-button\").classList.replace(\"top5-button\", \"top5-button-disabled\");\n    document.getElementById(\"redo-button\").classList.replace(\"top5-button\", \"top5-button-disabled\");\n    let oldName = store.currentList.items[index];\n\n    if (newName != \"\") {\n      let transaction = new ChangeItem_Transaction(store, index, oldName, newName);\n      tps.addTransaction(transaction);\n    }\n\n    store.UpdateDisableControl();\n    document.getElementById(\"close-button\").classList.replace(\"top5-button-disabled\", \"top5-button-disabled\");\n  };\n\n  store.moveItem = function (start, end) {\n    start -= 1;\n    end -= 1;\n\n    if (start < end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i < end; i++) {\n        store.currentList.items[i] = store.currentList.items[i + 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } else if (start > end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i > end; i--) {\n        store.currentList.items[i] = store.currentList.items[i - 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } // NOW MAKE IT OFFICIAL\n\n\n    store.updateCurrentList();\n  };\n\n  store.updateCurrentList = function () {\n    async function asyncUpdateCurrentList() {\n      const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      }\n    }\n\n    asyncUpdateCurrentList();\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n    store.UpdateDisableControl();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n    store.UpdateDisableControl();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // store.setIsItemNameEditActive = function () {\n  //     console.log(\"lol\");\n  //     storeReducer({\n  //         type: GlobalStoreActionType.SET_ITEM_NAME_EDIT_ACTIVE,\n  //         payload: null\n  //     });\n  // }\n  // THIS FUNCTION IS TO SHOW THE delete\n\n\n  store.deleteMarkedList = function () {// let id=store.currentList._id\n    // console.log(id);\n    // async function asyncdeleteMarkedList(id) {\n    //     const response = await api.deleteTop5ListById(id);\n    //     if (response.data.success) {\n    //         // storeReducer({\n    //         //     payload: store.currentList\n    //         // });\n    //     }\n    // }\n    // asyncdeleteMarkedList(id);\n  };\n\n  store.ShowDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n\n  store.hideDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n\n  store.DeleteList = function (idNamePair) {\n    store.ShowDeleteListModal(); // console.log(store.currentList);\n    // console.log(store.idNamePairs);\n    // console.log(idNamePair);\n    // return setStore({\n    //     currentList: idNamePair,\n    // });\n  };\n\n  store.UpdateDisableControl = function () {\n    if (tps.hasTransactionToRedo()) {\n      console.log(\"Can redo\");\n      document.getElementById(\"redo-button\").classList.replace(\"top5-button-disabled\", \"top5-button\");\n    } else {\n      console.log(\"Can not redo\");\n      document.getElementById(\"redo-button\").classList.replace(\"top5-button\", \"top5-button-disabled\");\n    }\n\n    if (tps.hasTransactionToUndo()) {\n      console.log(\"Can undo\");\n      document.getElementById(\"undo-button\").classList.replace(\"top5-button-disabled\", \"top5-button\");\n    } else {\n      console.log(\"Can not undo\");\n      document.getElementById(\"undo-button\").classList.replace(\"top5-button\", \"top5-button-disabled\");\n    }\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"zBkVEIt9tp3u6BtqQOwGlLmjEN0=\");","map":{"version":3,"sources":["C:/Users/22246/OneDrive/桌面/Top5Lists_HW3/Top5Lists_HW3/client/src/store/index.js"],"names":["createContext","useState","jsTPS","api","MoveItem_Transaction","ChangeItem_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CHANGE_ITEM_NAME","CLOSE_CURRENT_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","itemActive","listMarkedForDeletion","storeReducer","action","type","payload","top5List","isListNameEditActive","changeListName","id","newName","console","log","asyncChangeListName","response","getTop5ListById","data","success","name","updateList","updateTop5ListById","_id","getListPairs","getTop5ListPairs","pairsArray","changeItemName","index","asyncChangeItemName","items","closeCurrentList","document","getElementById","classList","replace","clearAllTransactions","UpdateDisableControl","CreateNewList","asyncCreateNewList","NewList","createTop5List","loadIdNamePairs","setCurrentList","asyncLoadIdNamePairs","search","asyncSetCurrentList","history","push","addMoveItemTransaction","start","end","transaction","addTransaction","addChangeItemTranscation","oldName","moveItem","temp","i","updateCurrentList","asyncUpdateCurrentList","undo","undoTransaction","redo","doTransaction","setIsListNameEditActive","deleteMarkedList","ShowDeleteListModal","modal","add","hideDeleteListModal","remove","DeleteList","idNamePair","hasTransactionToRedo","hasTransactionToUndo"],"mappings":"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","sourcesContent":["import { createContext, useState } from 'react'\r\nimport jsTPS from '../common/jsTPS'\r\nimport api from '../api'\r\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction'\r\nimport ChangeItem_Transaction from '../transactions/ChangeItem_Transactions';\r\nexport const GlobalStoreContext = createContext({});\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n    CHANGE_ITEM_NAME: \"CHANGE_ITEM_NAME\",\r\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n    //SET_ITEM_NAME_EDIT_ACTIVE: \"SET_ITEM_NAME_EDIT_ACTIVE\",\r\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\r\n}\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nexport const useGlobalStore = () => {\r\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n    const [store, setStore] = useState({\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        newListCounter: 0,\r\n        listNameActive: false,\r\n        itemActive: false,\r\n        listMarkedForDeletion: null,\r\n    });\r\n\r\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n    // HANDLE EVERY TYPE OF STATE CHANGE\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            // LIST UPDATE OF ITS NAME\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.top5List,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    //isItemEditActive: false,\r\n                    listMarkedForDeletion: null,\r\n                });\r\n            }\r\n            //Item UPDATE OF ITS NAME\r\n            case GlobalStoreActionType.CHANGE_ITEM_NAME: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.top5List,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    //isItemEditActive: false,\r\n                    listMarkedForDeletion: null,\r\n                });\r\n            }\r\n            // STOP EDITING THE CURRENT LIST\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    //isItemEditActive: false,\r\n                    listMarkedForDeletion: null,\r\n                })\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    //isItemEditActive: false,\r\n                    listMarkedForDeletion: null,\r\n                });\r\n            }\r\n            // UPDATE A LIST\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: false,\r\n                    //isItemEditActive: false,\r\n                    listMarkedForDeletion: null,\r\n                });\r\n            }\r\n            // START EDITING A LIST NAME\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    isListNameEditActive: true,\r\n                    //isItemEditActive: false,\r\n                    listMarkedForDeletion: null,\r\n                });\r\n            }\r\n            // START EDITING A ITEM NAME\r\n            // case GlobalStoreActionType.SET_ITEM_NAME_EDIT_ACTIVE: {\r\n            //     return setStore({\r\n            //         idNamePairs: store.idNamePairs,\r\n            //         currentList: store.currentList,\r\n            //         newListCounter: store.newListCounter,\r\n            //         isListNameEditActive: false,\r\n            //         isItemEditActive: false,\r\n            //         listMarkedForDeletion: null,\r\n            //         isItemEditActive: true\r\n            //     });\r\n            // }\r\n            default:\r\n                return store;\r\n        }\r\n    }\r\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \r\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n    store.changeListName = function (id, newName) {\r\n        // GET THE LIST\r\n        console.log(newName);\r\n        if (newName!==\"\"){\r\n        async function asyncChangeListName(id) {\r\n            let response = await api.getTop5ListById(id);\r\n            if (response.data.success) {\r\n                let top5List = response.data.top5List;\r\n                top5List.name = newName;\r\n                async function updateList(top5List) {\r\n                    response = await api.updateTop5ListById(top5List._id, top5List);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(top5List) {\r\n                            response = await api.getTop5ListPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        top5List: top5List\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(top5List);\r\n                    }\r\n                }\r\n                updateList(top5List);\r\n            }\r\n        }\r\n        asyncChangeListName(id);\r\n    }\r\n    }\r\n    //This Function processes changind the item name\r\n    store.changeItemName = function (index, newName) {\r\n        // GET THE LIST\r\n        async function asyncChangeItemName() {\r\n            let  top5List= store.currentList;\r\n            top5List.items[index]=newName;\r\n                async function updateList(top5List) {\r\n                    let response = await api.updateTop5ListById(top5List._id, top5List);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(top5List) {\r\n                            response = await api.getTop5ListPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        top5List: top5List\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(top5List);\r\n                    }\r\n                }\r\n                updateList(top5List);\r\n        }\r\n        asyncChangeItemName();\r\n    }\r\n\r\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n    store.closeCurrentList = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {}\r\n        });\r\n        document.getElementById(\"close-button\").classList.replace(\"top5-button\",\"top5-button-disabled\");\r\n        tps.clearAllTransactions();\r\n        store.UpdateDisableControl();\r\n    }\r\n    // This Function is to create new list\r\n    store.CreateNewList = function (){\r\n        async function asyncCreateNewList() {\r\n            let NewList={\r\n                \"name\": \"Untitled\",\r\n                \"items\":[\r\n                    \"?\",\r\n                    \"?\",\r\n                    \"?\",\r\n                    \"?\",\r\n                    \"?\"\r\n                ]\r\n            }\r\n            const response = await api.createTop5List(NewList);\r\n            if (response.data.success) {\r\n                console.log(response);\r\n                store.loadIdNamePairs();\r\n                store.setCurrentList(response.data.top5List._id);\r\n            }\r\n        }\r\n        asyncCreateNewList();\r\n    }\r\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n    store.loadIdNamePairs = function () {\r\n        async function asyncLoadIdNamePairs() {\r\n            const response = await api.getTop5ListPairs();\r\n            if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                    payload: pairsArray\r\n                });\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        store.UpdateDisableControl();\r\n        document.getElementById(\"close-button\").classList.replace(\"top5-button\",\"top5-button-disabled\");\r\n        asyncLoadIdNamePairs();\r\n    }\r\n\r\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\r\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\r\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\r\n    // moveItem, updateItem, updateCurrentList, undo, and redo\r\n    store.setCurrentList = function (id) {\r\n        if (id.search(\"-\") === -1){\r\n            async function asyncSetCurrentList(id) {\r\n                let response = await api.getTop5ListById(id);\r\n                if (response.data.success) {\r\n                    let top5List = response.data.top5List;\r\n\r\n                    response = await api.updateTop5ListById(top5List._id, top5List);\r\n                    if (response.data.success) {\r\n                        storeReducer({\r\n                            type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                            payload: top5List\r\n                        });\r\n                        store.history.push(\"/top5list/\" + top5List._id);\r\n                    }\r\n                }\r\n            }\r\n            asyncSetCurrentList(id);\r\n        }\r\n        store.UpdateDisableControl();\r\n        document.getElementById(\"close-button\").classList.replace(\"top5-button-disabled\",\"top5-button\");\r\n        console.log(store.currentList);\r\n    }\r\n    store.addMoveItemTransaction = function (start, end) {\r\n        let transaction = new MoveItem_Transaction(store, start, end);\r\n        tps.addTransaction(transaction);\r\n        store.UpdateDisableControl();\r\n    }\r\n    store.addChangeItemTranscation = function (index,newName){\r\n        document.getElementById(\"close-button\").classList.replace(\"top5-button\",\"top5-button-disabled\");\r\n        document.getElementById(\"undo-button\").classList.replace(\"top5-button\",\"top5-button-disabled\");\r\n        document.getElementById(\"redo-button\").classList.replace(\"top5-button\",\"top5-button-disabled\");\r\n        let oldName=store.currentList.items[index];\r\n        if (newName!=\"\"){\r\n            let transaction =new ChangeItem_Transaction(store,index,oldName,newName);\r\n            tps.addTransaction(transaction);\r\n        }\r\n        store.UpdateDisableControl();\r\n        document.getElementById(\"close-button\").classList.replace(\"top5-button-disabled\",\"top5-button-disabled\");\r\n    }\r\n    store.moveItem = function (start, end) {\r\n        start -= 1;\r\n        end -= 1;\r\n        if (start < end) {\r\n            let temp = store.currentList.items[start];\r\n            for (let i = start; i < end; i++) {\r\n                store.currentList.items[i] = store.currentList.items[i + 1];\r\n            }\r\n            store.currentList.items[end] = temp;\r\n        }\r\n        else if (start > end) {\r\n            let temp = store.currentList.items[start];\r\n            for (let i = start; i > end; i--) {\r\n                store.currentList.items[i] = store.currentList.items[i - 1];\r\n            }\r\n            store.currentList.items[end] = temp;\r\n        }\r\n\r\n        // NOW MAKE IT OFFICIAL\r\n        store.updateCurrentList();\r\n    }\r\n    store.updateCurrentList = function() {\r\n        async function asyncUpdateCurrentList() {\r\n            const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\r\n            if (response.data.success) {\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                    payload: store.currentList\r\n                });\r\n            }\r\n        }\r\n        asyncUpdateCurrentList();\r\n    }\r\n    store.undo = function () {\r\n        tps.undoTransaction();\r\n        store.UpdateDisableControl();\r\n    }\r\n    store.redo = function () {\r\n        tps.doTransaction();\r\n        store.UpdateDisableControl();\r\n    }\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n    store.setIsListNameEditActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n\r\n    // store.setIsItemNameEditActive = function () {\r\n    //     console.log(\"lol\");\r\n    //     storeReducer({\r\n    //         type: GlobalStoreActionType.SET_ITEM_NAME_EDIT_ACTIVE,\r\n    //         payload: null\r\n    //     });\r\n    // }\r\n    // THIS FUNCTION IS TO SHOW THE delete\r\n    store.deleteMarkedList = function(){\r\n        // let id=store.currentList._id\r\n        // console.log(id);\r\n        // async function asyncdeleteMarkedList(id) {\r\n        //     const response = await api.deleteTop5ListById(id);\r\n        //     if (response.data.success) {\r\n        //         // storeReducer({\r\n        //         //     payload: store.currentList\r\n        //         // });\r\n        //     }\r\n        // }\r\n        // asyncdeleteMarkedList(id);\r\n    }\r\n\r\n    store.ShowDeleteListModal = function(){\r\n        let modal = document.getElementById(\"delete-modal\");\r\n        modal.classList.add(\"is-visible\");\r\n    }\r\n\r\n    store.hideDeleteListModal = function(){\r\n        let modal = document.getElementById(\"delete-modal\");\r\n        modal.classList.remove(\"is-visible\");\r\n    }\r\n\r\n    store.DeleteList = function(idNamePair){\r\n        store.ShowDeleteListModal();\r\n        // console.log(store.currentList);\r\n        // console.log(store.idNamePairs);\r\n        // console.log(idNamePair);\r\n        // return setStore({\r\n        //     currentList: idNamePair,\r\n        // });\r\n    }\r\n\r\n    store.UpdateDisableControl = function(){\r\n        if(tps.hasTransactionToRedo()){\r\n            console.log(\"Can redo\");\r\n            document.getElementById(\"redo-button\").classList.replace(\"top5-button-disabled\",\"top5-button\");\r\n        }\r\n        else{\r\n            console.log(\"Can not redo\");\r\n            document.getElementById(\"redo-button\").classList.replace(\"top5-button\",\"top5-button-disabled\");\r\n        }\r\n\r\n        if(tps.hasTransactionToUndo()){\r\n            console.log(\"Can undo\");\r\n            document.getElementById(\"undo-button\").classList.replace(\"top5-button-disabled\",\"top5-button\");\r\n        }\r\n        else{\r\n            console.log(\"Can not undo\");\r\n            document.getElementById(\"undo-button\").classList.replace(\"top5-button\",\"top5-button-disabled\");\r\n        }\r\n    }\r\n\r\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\r\n    return { store, storeReducer };\r\n}"]},"metadata":{},"sourceType":"module"}